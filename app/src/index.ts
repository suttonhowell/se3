import { app, BrowserWindow, ipcMain, Menu, nativeTheme } from 'electron';
import installExtension, {
  REACT_DEVELOPER_TOOLS,
  REDUX_DEVTOOLS,
} from 'electron-devtools-installer';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: any;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  // ipc handlers for dark mode detection
  ipcMain.handle('dark-mode:toggle', () => {
    if (nativeTheme.shouldUseDarkColors) {
      nativeTheme.themeSource = 'light';
    } else {
      nativeTheme.themeSource = 'dark';
    }
    return nativeTheme.shouldUseDarkColors;
  });

  ipcMain.handle('dark-mode:get', () => {
    return nativeTheme.themeSource;
  });

  ipcMain.handle('dark-mode:system', () => {
    nativeTheme.themeSource = 'system';
  });


  // submenu: [
  //   {label:'Adjust Notification Value'},
  //   {label:'CoinMarketCap'},
  //   {
  //       label:'Exit', 
  //       click() { 
  //           app.quit() 
  //       } 
  //   }
  
  var menu = Menu.buildFromTemplate([
    { label: 'File',
      submenu: [
        { label: 'Open', 
          click() { 
            console.log("Open was clicked\n"); 
          } 
        },//end of Open
        { label: 'Save',
          click() { 
            console.log("Save was clicked\n"); 
          } 
        },//end of Save 
        { label: 'Exit',
          click() { 
              console.log("Exit was clicked\nExiting...\n");
              app.quit() 
          } 
        }//end of Exit
      ],
    },//end of File submenu
    { label: 'Edit',
      submenu: [
        { label: 'Undo',
          click() { 
            console.log("Undo was clicked\n"); 
          }
        },//end of Undo 
        { label: 'Redo',
          click() { 
            console.log("Redo was clicked\n"); 
          }
        }//end of Redo
      ],
    },//end of Edit submenu
    { label: 'Format',
      submenu: [
        { label: 'Option 1', 
          click() { 
            console.log("Option 1 (Format) was clicked\n"); 
          }
        },//end of Option 1
        { label: 'Option 2',
          click() { 
            console.log("Option 2 (Format) was clicked\n"); 
          }
        }//end of Option 2
      ],
    },//end of Format submenu
    { label: 'Settings',
      submenu: [
        { label: 'Option 1',
          click() { 
            console.log("Option 1 (Settings) was clicked\n"); 
          } 
        },//end of Option 1
        { label: 'Option 2',
          click() { 
            console.log("Option 2 (Settings) was clicked\n"); 
          }
        }//end of Option 2
      ],
    },//end of Settings submenu
  ]);
  Menu.setApplicationMenu(menu);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// Install devtools
app.whenReady().then(() => {
  installExtension([REACT_DEVELOPER_TOOLS, REDUX_DEVTOOLS], {
    loadExtensionOptions: { allowFileAccess: true },
  })
    .then((name) => console.log(`Added Extension:  ${name}`))
    .catch((err) => console.log('An error occurred: ', err));
});
